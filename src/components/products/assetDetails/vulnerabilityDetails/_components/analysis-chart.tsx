import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ChartConfig, ChartContainer } from "@/components/ui/chart";
import {
  Label,
  PolarGrid,
  PolarRadiusAxis,
  RadialBar,
  RadialBarChart,
} from "recharts";

type ViewBoxProps = {
  cx: number;
  cy: number;
};

const chartConfig = {} satisfies ChartConfig;

function LabelContent({
  viewBox,
  label,
}: Readonly<{ viewBox?: ViewBoxProps; label: string }>) {
  if (viewBox?.cx != null && viewBox?.cy != null) {
    return (
      <text x={viewBox.cx} y={viewBox.cy} textAnchor="middle">
        <tspan
          x={viewBox.cx}
          y={viewBox.cy + 5}
          className="fill-muted-foreground text-lg"
        >
          {label}
        </tspan>
      </text>
    );
  }
  return null;
}

/**
 * Maps severity levels to corresponding chart properties.
 * - `percentage` controls the angle in the radial chart.
 * - `color` sets the bar color.
 * - `colorName` is used for dynamic styling.
 */
const labelToData = {
  Critical: {
    percentage: 270,
    color: "#D04D6C",
    colorName: "first:fill-red",
  },
  High: {
    percentage: 1,
    color: "#FB9199",
    colorName: "first:fill-red-impactLight",
  },
  Medium: {
    percentage: 90,
    color: "#FED677",
    colorName: "first:fill-yellow-light",
  },
  Low: {
    percentage: 180,
    color: "#31D080",
    colorName: "first:fill-green-lighter",
  },
};

export default function AnalysisChart({
  title = "",
  value,
}: {
  title: string;
  value: "Low" | "Medium" | "High" | "Critical";
}) {
  const data = labelToData[value];

  if (!data) {
    return (
      <Card className="statsCardShadow">
        <CardHeader className="pb-0">
          <CardTitle>{title}</CardTitle>
        </CardHeader>
        <CardContent className="flex-1 pb-0">
          <p className="text-muted-foreground text-center">
            Data not available
          </p>
        </CardContent>
      </Card>
    );
  }

  const { color, colorName, percentage } = data;

  // Data for the radial chart
  const chartData = [{ color, colorName, percentage, name: value }];

  return (
    <Card className="statsCardShadow">
      <CardHeader className="pb-0">
        <CardTitle>{title}</CardTitle>
      </CardHeader>
      <CardContent className="flex-1 pb-0">
        <ChartContainer
          config={chartConfig}
          className="mx-auto aspect-square max-h-52"
        >
          <RadialBarChart
            data={chartData}
            startAngle={percentage}
            endAngle={270}
            innerRadius={65}
            outerRadius={95}
          >
            <PolarGrid
              gridType="circle"
              radialLines={false}
              stroke="none"
              className={`${colorName} last:fill-white`}
              polarRadius={[71, 59]}
            />
            <RadialBar
              dataKey="percentage"
              background
              cornerRadius={10}
              fill={color}
              isAnimationActive={false}
            />
            <PolarRadiusAxis tick={false} tickLine={false} axisLine={false}>
              <Label content={<LabelContent label={value} />} />
            </PolarRadiusAxis>
          </RadialBarChart>
        </ChartContainer>
      </CardContent>
    </Card>
  );
}
