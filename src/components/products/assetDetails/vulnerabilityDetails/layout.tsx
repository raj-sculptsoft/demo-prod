import Header from "@/components/layout/header";
import { useAppDispatch, useAppSelector } from "@/hooks/use-store";
import { VULNERABILITY_DETAILS_SOURCE } from "@/lib/common";
import { getVulnerability } from "@/store/vulnerabilities/api";
import { IdParams } from "@/types/common";
import React, { useEffect } from "react";

export default function Layout({
  children,
  params,
  source,
}: {
  children: React.ReactNode;
  params: IdParams;
  source: VULNERABILITY_DETAILS_SOURCE;
}) {
  const dispatch = useAppDispatch();
  const [fileName, setFileName] = React.useState("");
  const [productName, setProductName] = React.useState("");
  const [assetName, setAssetName] = React.useState("");
  const { productId, assetId, vulnerabilityId } = params;

  const { data } = useAppSelector(
    ({ vulnerability }) => vulnerability.currentVulnerability,
  );

  useEffect(() => {
    if (vulnerabilityId) {
      dispatch(getVulnerability(vulnerabilityId));
    }
  }, [vulnerabilityId]);

  useEffect(() => {
    if (data) {
      setFileName(data?.file_name || "File Name");
      setProductName(data?.assets?.products?.product_name || "Product Name");
      setAssetName(data?.assets?.asset_name || "Asset Name");
    }
  }, [data]);

  if (!productId || !assetId || !vulnerabilityId) {
    return null;
  }

  const nodes = [
    ...(source === VULNERABILITY_DETAILS_SOURCE.PRODUCT
      ? [
          { name: productName, href: "/products" },
          { name: assetName, href: `/product/${productId}/assets` },
          {
            name: fileName,
            href: `/product/${productId}/asset/${assetId}/vulnerabilities`,
          },
          {
            name: "Vulnerability Details",
            href: `/product/${productId}/asset/${assetId}/vulnerability/${vulnerabilityId}/details`,
          },
        ]
      : source === VULNERABILITY_DETAILS_SOURCE.VULNERABILITY
        ? [
            { name: "Vulnerabilities", href: "/vulnerabilities" },
            {
              name: fileName,
              href: `/vulnerability/${productId}/${assetId}/${vulnerabilityId}/details`,
            },
          ]
        : []),
  ];

  return (
    <>
      <Header nodes={nodes} />
      {children}
    </>
  );
}
