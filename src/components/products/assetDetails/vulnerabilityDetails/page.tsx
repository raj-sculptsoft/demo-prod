import { useAppDispatch, useAppSelector } from "@/hooks/use-store";
import { VULNERABILITY_DETAILS_SOURCE } from "@/lib/common";
import { getVulnerability } from "@/store/vulnerabilities/api";
import { resetVulnerabilityState } from "@/store/vulnerabilities/slice";
import { ImpactLevel } from "@/types/vulnerability";
import { useEffect } from "react";
import { useParams } from "react-router-dom";
import Details from "./_components/details";
import Feedback from "./_components/feedback";
import VulnerabilityDetailsSkeleton from "./_skeleton/details";
import Layout from "./layout";

export default function VulnerabilityDetails({
  source,
}: {
  source: VULNERABILITY_DETAILS_SOURCE;
}) {
  const dispatch = useAppDispatch();
  const { productId, assetId, vulnerabilityId } = useParams<{
    productId: string;
    assetId: string;
    vulnerabilityId: string;
  }>();
  const { loading, data } = useAppSelector(
    ({ vulnerability }) => vulnerability.currentVulnerability,
  );

  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  useEffect(() => {
    if (vulnerabilityId) {
      dispatch(getVulnerability(vulnerabilityId));
    }
  }, [vulnerabilityId, dispatch]);

  useEffect(() => {
    return () => {
      dispatch(resetVulnerabilityState());
    };
  }, [dispatch]);

  const capitalizeFirstLetter = (str: string): ImpactLevel => {
    const capitalized =
      str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
    if (["Critical", "High", "Medium", "Low"].includes(capitalized)) {
      return capitalized as ImpactLevel;
    }
    return str as ImpactLevel;
  };

  return (
    <Layout
      params={{
        productId: productId ?? "",
        assetId: assetId ?? "",
        vulnerabilityId: vulnerabilityId ?? "",
      }}
      source={source}
    >
      {loading || !data ? (
        <div className="flex flex-col gap-4">
          <VulnerabilityDetailsSkeleton />
        </div>
      ) : (
        <div className="flex flex-col gap-4">
          <Details
            id={data.id}
            impact={capitalizeFirstLetter(data.impact)}
            severity={capitalizeFirstLetter(data.severity)}
            confidence_score={data.confidence_score}
            cwe={data.cwe}
            cve={data.cve}
            description={data.description}
            recommendation={data.recommendation}
            positivity={data.positivity}
            likelihood={data.likelihood}
            exploitability={data.exploitability}
            vulnerability={data.vulnerability}
          />
          <Feedback
            positivity={data.positivity}
            vulnerabilityId={vulnerabilityId ?? ""}
          />
        </div>
      )}
    </Layout>
  );
}
